CREATE DATABASE IF NOT EXISTS Planny;

CREATE USER 'quanghuy'@'%' IDENTIFIED BY '12345';
GRANT ALL PRIVILEGES ON Planny.* TO 'quanghuy'@'%';
FLUSH PRIVILEGES;

USE Planny;

-- CREATE TABLE PHASE
CREATE TABLE `Account` (
    `account_id` INT AUTO_INCREMENT PRIMARY KEY,
    `username` VARCHAR(63),
    `email` VARCHAR(63),
    `sub` VARCHAR(63),
    `password` VARCHAR(127) NOT NULL,
    `is_enabled` BIT DEFAULT 1,
    UNIQUE KEY `unique_account_email_sub` (`email`, `sub`),
    UNIQUE KEY `unique_account_username` (`username`)
);

CREATE TABLE `User` (
    `user_id` INT PRIMARY KEY,
    `username` VARCHAR(63) UNIQUE,
    `email` VARCHAR(63) UNIQUE,
    `fullname` NVARCHAR(63),
    `avatar` VARCHAR(127),
    `dob` DATE,
    `gender` BIT DEFAULT 1,
    `is_private` BIT DEFAULT 0,
    CONSTRAINT `unique_user_username` UNIQUE (`username`),
    CONSTRAINT `unique_user_email` UNIQUE (`email`),
    CONSTRAINT `fk_user_account` FOREIGN KEY (`user_id`) REFERENCES `Account` (`account_id`)
);

CREATE TABLE `Workspace` (
    `workspace_id` INT AUTO_INCREMENT PRIMARY KEY,
    `workspace_name` NVARCHAR(63) NOT NULL,
    `short_name` VARCHAR(63) UNIQUE,
    `website` VARCHAR(128),
    `description` VARCHAR(255),
    `is_enabled` BIT DEFAULT 1,
    `user_id` INT,
    FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`)
);

CREATE TABLE `Board` (
    `board_id` INT AUTO_INCREMENT PRIMARY KEY,
    `board_name` NVARCHAR(63) NOT NULL,
    `short_name` VARCHAR(63) UNIQUE,
    `slug_url` VARCHAR(63) UNIQUE,
    `visibility` NVARCHAR(63) NOT NULL,
    `is_enabled` BIT DEFAULT 1,
    `workspace_id` INT,
    FOREIGN KEY (`workspace_id`) REFERENCES `Workspace` (`workspace_id`)
);

CREATE TABLE `List` (
    `list_id` INT AUTO_INCREMENT PRIMARY KEY,
    `title` NVARCHAR(63) NOT NULL,
    `ordinal_numeral` INT NOT NULL,
    `is_enabled` BIT DEFAULT 1,
    `board_id` INT,
    FOREIGN KEY (`board_id`) REFERENCES `Board` (`board_id`)
);

CREATE TABLE `Card` (
    `card_id` INT AUTO_INCREMENT PRIMARY KEY,
    `title` NVARCHAR(128) NOT NULL,
    `description` NVARCHAR(255),
    `cover` VARCHAR(128),
    `start_date` DATETIME,
    `due_date` DATETIME,
    `is_completed` BIT DEFAULT 0,
    `short_name` VARCHAR(63) UNIQUE,
    `slug_url` VARCHAR(63) UNIQUE,
    `is_enabled` BIT DEFAULT 1,
    `list_id` INT,
    FOREIGN KEY (`list_id`) REFERENCES `List` (`list_id`)
);

CREATE TABLE `Collaborator` (
    `collaborator_id` INT AUTO_INCREMENT PRIMARY KEY,
    `role` NVARCHAR(63) NOT NULL,
    `username` VARCHAR(63),
    `email` VARCHAR(63),
    `fullname` NVARCHAR(63),
    `avatar` VARCHAR(127),
    `user_id` INT,
    `workspace_id` INT,
    FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`),
    FOREIGN KEY (`workspace_id`) REFERENCES `Workspace` (`workspace_id`)
);

CREATE TABLE `Member` (
    `member_id` INT AUTO_INCREMENT PRIMARY KEY,
    `role` NVARCHAR(63) NOT NULL,
    `username` VARCHAR(63),
    `email` VARCHAR(63),
    `avatar` VARCHAR(127),
    `fullname` NVARCHAR(63),
    `is_enabled` BIT DEFAULT 1,
    `user_id` INT,
    `board_id` INT,
    FOREIGN KEY (`user_id`) REFERENCES `User` (`user_id`),
    FOREIGN KEY (`board_id`) REFERENCES `Board` (`board_id`)
);

CREATE TABLE `Card_Conductor` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `assigned_time` DATETIME,
    `card_id` INT,
    `member_id` INT,
    FOREIGN KEY (`card_id`) REFERENCES `Card` (`card_id`),
    FOREIGN KEY (`member_id`) REFERENCES `Member` (`member_id`)
);

-- CREATE OTHER DBO
DELIMITER //

CREATE TRIGGER `afterDisableCard`
AFTER UPDATE ON `Card`
FOR EACH ROW
BEGIN
    IF OLD.`is_enabled` <> NEW.`is_enabled` THEN
        UPDATE `Card_Conductor`
        SET `is_enabled` = NEW.`is_enabled`
        WHERE `card_id` = NEW.`card_id`;
    END IF;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE `disableCardAndConductors`(IN cardId INT)
BEGIN
    UPDATE `Card`
    SET `is_enabled` = 0
    WHERE `card_id` = cardId;
END //

DELIMITER ;

